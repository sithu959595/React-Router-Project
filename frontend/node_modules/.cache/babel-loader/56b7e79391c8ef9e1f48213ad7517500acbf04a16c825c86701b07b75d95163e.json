{"ast":null,"code":"var _jsxFileName = \"/Users/lin/Desktop/React/Projects/Router 1/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport EventPage from \"./pages/EventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport EventDetailPage from \"./pages/EventDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport Root from \"./pages/Root\";\nimport RootForEvents from \"./pages/RootForEvents\";\nimport { element } from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"events\",\n      element: /*#__PURE__*/_jsxDEV(RootForEvents, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this),\n      children: [{\n        path: \"\",\n        element: /*#__PURE__*/_jsxDEV(EventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 34\n        }, this)\n      }, {\n        path: \":eventId\",\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this)\n      }, {\n        path: \"new\",\n        element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 24\n        }, this)\n      }, {\n        path: \":eventId/edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 24\n        }, this)\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","EventPage","EditEventPage","EventDetailPage","NewEventPage","Root","RootForEvents","element","jsxDEV","_jsxDEV","App","router","path","fileName","_jsxFileName","lineNumber","columnNumber","children","index","_c","$RefreshReg$"],"sources":["/Users/lin/Desktop/React/Projects/Router 1/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport EventPage from \"./pages/EventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport EventDetailPage from \"./pages/EventDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport Root from \"./pages/Root\";\nimport RootForEvents from \"./pages/RootForEvents\";\nimport { element } from \"prop-types\";\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <Root />,\n      children: [\n        {\n          index: true,\n          element: <HomePage />,\n        },\n        {\n          path: \"events\",\n          element: <RootForEvents />,\n          children: [\n            { path: \"\", element: <EventPage /> },\n            {\n              path: \":eventId\",\n              element: <EventDetailPage />,\n            },\n            {\n              path: \"new\",\n              element: <NewEventPage />,\n            },\n            {\n              path: \":eventId/edit\",\n              element: <EditEventPage />,\n            },\n          ],\n        },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router}></RouterProvider>;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,eAAe,MAAM,yBAAyB;AACrD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,aAAa,MAAM,uBAAuB;AACjD,SAASC,OAAO,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGb,mBAAmB,CAAC,CACjC;IACEc,IAAI,EAAE,GAAG;IACTL,OAAO,eAAEE,OAAA,CAACJ,IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACjBC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXX,OAAO,eAAEE,OAAA,CAACT,QAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACtB,CAAC,EACD;MACEJ,IAAI,EAAE,QAAQ;MACdL,OAAO,eAAEE,OAAA,CAACH,aAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAC1BC,QAAQ,EAAE,CACR;QAAEL,IAAI,EAAE,EAAE;QAAEL,OAAO,eAAEE,OAAA,CAACR,SAAS;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC,EACpC;QACEJ,IAAI,EAAE,UAAU;QAChBL,OAAO,eAAEE,OAAA,CAACN,eAAe;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC7B,CAAC,EACD;QACEJ,IAAI,EAAE,KAAK;QACXL,OAAO,eAAEE,OAAA,CAACL,YAAY;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC1B,CAAC,EACD;QACEJ,IAAI,EAAE,eAAe;QACrBL,OAAO,eAAEE,OAAA,CAACP,aAAa;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC3B,CAAC;IAEL,CAAC;EAEL,CAAC,CACF,CAAC;EACF,oBAAOP,OAAA,CAACV,cAAc;IAACY,MAAM,EAAEA;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AAC1D;AAACG,EAAA,GAjCQT,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}